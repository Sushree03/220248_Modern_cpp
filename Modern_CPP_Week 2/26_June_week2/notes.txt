week agenda

    week 2 : functional programming

    supplementary concepts
        1) containers in C++
            -> vector and C-style array
        2) Move semantics

        3) RAII classes

        4) Git version control

        5) Command-line utilities

        6) How to interact with large scale projects

        7) recurssion and other styles of programming 



10 20 30

1) c-style array

    10        20       30
    0x100H    0x104H   0X108H
    ^
    |
    arr

2) std::vector

     10        20         30
    0x100H    0x104H      0X108H                  ^
    ^         ^           ^
    |         |           |
    |         |           |
    [ 0x100H  | 0x108H    | 0x120H    ]         

    std::vector<int> data;

3) std::list<T>
 
  0x111H                      0x200H                  0x800
nullptr|10 | 0x200H          0x111H|20 | 0x800       0x200| 30 |nullptr

FOR CONSECUTIVE ELEMETNS

    from base location to last element location (size-1)
        - access element access

            base address + (location * size of each element)


FOR LINKED LIST
   
   from first location:
    - dereference to reach the element. access in
    - Now, read the address for the next element
    - if next pointer is nullptr, break.
    - else, repeat steps.

UNIVERSAL ALGORITHM

    a) for every element fetched from the container
            (DON'T GIVE A DAMN HOW YOU GET IT),
                -access the element and do something with it.


Iterators are abstraction created over pointers to elements in a container